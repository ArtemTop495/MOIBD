import streamlit as st
import pandas as pd
import requests
from PIL import Image
import matplotlib.pyplot as plt
import numpy as np
from wordcloud import WordCloud

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ—Ü. –º–µ–¥–∏–∞",
    page_icon="üìä",
    layout="wide"
)

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .positive { color: green; font-weight: bold; }
    .negative { color: red; font-weight: bold; }
    .stTextArea textarea { min-height: 150px; }
    .metric-box { padding: 15px; border-radius: 10px; background: #f0f2f6; }
</style>
""", unsafe_allow_html=True)


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        data = pd.read_csv('lala.csv')
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['text', 'type', 'date', 'name']
        for col in required_cols:
            if col not in data.columns:
                st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞: {col}")
                return pd.DataFrame()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        if 'date' in data.columns:
            data['date'] = pd.to_datetime(data['date'], errors='coerce')

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        data['text_length'] = data['text'].str.len()

        return data

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return pd.DataFrame()


data = load_data()

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚ÑπÔ∏è –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ "])

with tab1:
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
    st.title("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞")
    st.markdown("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –µ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏")

    text_input = st.text_area("–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å...",
                            key="text_input", height=150)

    if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", key="analyze_btn"):
        if not text_input.strip():
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        else:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
                response = requests.post(
                    "http://localhost:8000/predict",
                    json={"text": text_input},
                    timeout=5
                )

                if response.status_code == 200:
                    result = response.json()

                    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    sentiment_class = "positive" if result["sentiment"] == "positive" else "negative"
                    st.markdown(
                        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <span class='{sentiment_class}'>{result['sentiment'].upper()}</span> "
                        f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.1%})",
                        unsafe_allow_html=True
                    )

                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
                    fig, ax = plt.subplots(figsize=(8, 4))
                    ax.bar(["–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π", "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π"],
                           [result["probabilities"]["negative"], result["probabilities"]["positive"]],
                           color=["red", "green"])
                    ax.set_ylim(0, 1)
                    ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")


                else:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")

            except requests.exceptions.RequestException:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–Ω–∞–ª–∏–∑–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.")
                st.info("""
                –î–ª—è –∑–∞–ø—É—Å–∫–∞ API –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
                ```bash
                uvicorn api:app --reload
                ```
                """)
with tab2:
    st.title("üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")

    if data.empty:
        st.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        st.subheader("–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
        cols = st.columns(4)
        with cols[0]:
            st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(data))
        with cols[1]:
            st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤", data['name'].nunique())
        with cols[2]:
            avg_len = data['text_length'].mean()
            st.metric("–°—Ä. –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞", f"{avg_len:.1f} —Å–∏–º–≤.")
        with cols[3]:
            pos_pct = (data['type'] == 1).mean() * 100
            st.metric("–î–æ–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö", f"{pos_pct:.1f}%")





        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
        st.subheader("–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        fig3, ax3 = plt.subplots(figsize=(10, 4))
        data['text_length'].hist(bins=30, ax=ax3)
        ax3.set_xlabel("–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (—Å–∏–º–≤–æ–ª—ã)")
        ax3.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π")
        st.pyplot(fig3)

        # –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤
        st.subheader("–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤")
        top_authors = data['name'].value_counts().head(10)
        st.bar_chart(top_authors)

        # –û–±–ª–∞–∫–æ —Å–ª–æ–≤
        st.subheader("–û–±–ª–∞–∫–æ —Å–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π")
        all_text = " ".join(data['text'].dropna())
        wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_text)
        fig4, ax4 = plt.subplots(figsize=(12, 6))
        ax4.imshow(wordcloud, interpolation='bilinear')
        ax4.axis('off')
        st.pyplot(fig4)

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        st.subheader("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(data.head(100))

with tab3:
    st.title("üìñ –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    st.header("1. –ö–∞–∫ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
    st.markdown("""
    1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É **üìù –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞**
    2. –í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ
    3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å**
    4. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ü–µ–Ω–∫–æ–π —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    """)


    st.subheader("–ü—Ä–∏–º–µ—Ä:")
    try:
        guide_img1 = Image.open("images/img.png")
        st.image(guide_img1, caption="–ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞", width=600)
    except:
        st.warning("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ (guide1.png)")

    st.header("2. –ö–∞–∫ —Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    st.markdown("""
    1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É **üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**
    2. –ò–∑—É—á–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """)


    st.subheader("–ü—Ä–∏–º–µ—Ä:")
    try:
        guide_img2 = Image.open("images/img_1.png")
        st.image(guide_img2, caption="–ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", width=600)
    except:
        st.warning("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–∞–∑–¥–µ–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (guide2.png)")

    st.header("3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
    st.markdown("""
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã: Chrome, Firefox, Edge
    - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: 1280√ó720
    - –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    """)

    st.header("4. –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    with st.expander("–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?"):
        st.write("""
        - **–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π (>70% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)**: –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è
        - **–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π (>70% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)**: –ü—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞
        - **–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (30-70%)**: –ù–µ–ª—å–∑—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        """)

    with st.expander("–ì–¥–µ –≤–∑—è—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞?"):
        st.write("""
        –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
        - –û—Ç–∑—ã–≤—ã —Å —Å–∞–π—Ç–æ–≤
        - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π
        - –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        """)


    st.subheader("–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:")
    try:
        guide_img3 = Image.open("images/img_2.png")
        st.image(guide_img3, caption="–ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", width=600)
    except:
        st.warning("–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (guide3.png)")
# –°–∞–π–¥–±–∞—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
with st.sidebar:
    st.header("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    if not data.empty:

        st.write(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data):,}")
        st.write(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤: {data['name'].nunique()}")

    st.markdown("""
    ### –ù–∞–≤–∏–≥–∞—Ü–∏—è:
    - **–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞**: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    - **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    - **–û –¥–∞–Ω–Ω—ã—Ö**: –û–ø–∏—Å–∞–Ω–∏–µ –∏ –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """)